<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/08/06/hello-world/"/>
      <url>/2020/08/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Download</title>
      <link href="/2020/08/05/download/"/>
      <url>/2020/08/05/download/</url>
      
        <content type="html"><![CDATA[<p><a href="https://vdse.bdstatic.com/b5f6fd9d2fac4a8f8d87b8b4c8b4ca0f.mp4">《冬天的秘密mv》- (周传雄)</a></p><pre><code>###java demopackage com.down;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.net.MalformedURLException;import java.net.URL;import java.net.URLConnection;/** * @author 作者: xiaoyu * @version 创建时间: 2020年8月5日 上午12:33:58 * @description */public class Download {    public static void main(String[] args) {        String url = "https://vdse.bdstatic.com/b5f6fd9d2fac4a8f8d87b8b4c8b4ca0f.mp4";        String path = "d:/冬天的秘密mv.mp4";        boolean bool = httpDownload(url, path);        System.out.println(bool);    }    /**     * 下载文件(视频)类     *      * @author xiaoyu     * @Date 2020年8月5日 下午12:43:35     *     * @param httpUrl 源网络文件的地址     * @param path    保存文件的路径(带后缀)     * @return     */    public static boolean httpDownload(String httpUrl, String path) {        // 1.下载网络文件        int byteRead;        URL url;        try {            url = new URL(httpUrl);        } catch (MalformedURLException e1) {            e1.printStackTrace();            return false;        }        try {            // 2.获取链接            URLConnection conn = url.openConnection();            // 3.输入流            InputStream inStream = conn.getInputStream();            // 3.写入文件            OutputStream fs = new FileOutputStream(new File(path));            byte[] buffer = new byte[1024];            while ((byteRead = inStream.read(buffer)) != -1) {                fs.write(buffer, 0, byteRead);            }            inStream.close();            fs.close();            return true;        } catch (FileNotFoundException e) {            e.printStackTrace();            return false;        } catch (IOException e) {            e.printStackTrace();            return false;        }    }}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> download </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
